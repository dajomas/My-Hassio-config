  sonos_pauze_spreek:
    sequence:
      - service: sonos.snapshot
        data_template:
          entity_id: "{{ sonos_entity }}"
      - delay: '00:00:03'
      - service: media_player.volume_set
        data_template:
          entity_id: "{{ sonos_entity }}"
          volume_level: "{{ volume }}"
      - delay: '00:00:01'
      # - service: tts.voicerss_say
      # - service: tts.google_translate_say
      - service_template: >
          {% if is_state('input_select.tts', 'VoiceRSS') %}
            tts.voicerss_say
          {% elif is_state('input_select.tts', 'Google') %}
            tts.google_translate_say
          {% else %}
              False
          {% endif %}
        data_template:
          entity_id: "{{ sonos_entity }}"
          message: "{{ speech_message }}"
      - delay: '00:00:02'
      - wait_template: "{{ states('binary_sensor.keuken_not_playing') == 'on' }}"
      - delay: '00:00:01'
      - service: sonos.restore
        data_template:
          entity_id: "{{ sonos_entity }}"
      - delay: '00:00:03'
      - service_template: >-
          {% if state_attr('media_player.keuken', 'media_artist') == 'nl-nl' or state_attr('media_player.keuken', 'media_artist') == 'nl' %}
            script.sonos_pauze_spreek_1_1
          {% else %}
            script.sonos_pauze_spreek_1_2
          {% endif %}
        data_template:
          entity_id: "{{ sonos_entity }}"
      # - condition: and
      #   conditions:
      #     - condition: state
      #       entity_id: media_player.philips_tv
      #       state: 'off'
      #     - condition: state
      #       entity_id: media_player.philips_tv_wifi
      #       state: 'off'
      #     - condition: template
      #       value_template: "{{states('alarm_control_panel.ha_alarm')  != 'armed_night' }}"
      #     - condition: template
      #       value_template: "{{ state_attr('media_player.keuken', 'media_artist') != 'nl-nl' }}"
      #     - condition: template
      #       value_template: "{{ state_attr('media_player.keuken', 'media_artist') != 'nl' }}"
      #     - condition: or
      #       conditions:
      #         - condition: time
      #           after: '15:55:00'
      #         - condition: and
      #           conditions:
      #             - condition: state
      #               entity_id: binary_sensor.v_w_nacht
      #               state: 'off'
      #             - condition: state
      #               entity_id: binary_sensor.v_nacht
      #               state: 'off'
      # - delay: '00:00:01'
      # - service: media_player.media_play
      #   data_template:
      #     entity_id: "{{ sonos_entity }}"


